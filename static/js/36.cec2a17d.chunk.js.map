{"version":3,"sources":["hooks/useIsVisible.js","components/State.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","DeltaBarGraph","lazy","retry","Footer","Level","VaccinationHeader","MapExplorer","MapSwitcher","Minigraphs","StateHeader","StateMeta","TimeseriesExplorer","State","t","useTranslation","stateCode","useParams","toUpperCase","useSessionStorage","mapStatistic","setMapStatistic","showAllDistricts","setShowAllDistricts","districtName","regionHighlighted","setRegionHighlighted","delta7Mode","setDelta7Mode","useSWR","DATA_API_ROOT","fetcher","revalidateOnMount","refreshInterval","timeseries","data","timeseriesResponseError","error","stateData","gridRowCount","useMemo","gridColumnCount","window","innerWidth","districtCount","districts","Object","keys","filter","length","Math","ceil","stateMetaElement","useRef","isStateMetaVisible","trail","styles","map","element","index","push","animationDelay","lookback","lastDataDate","updatedDates","meta","date","tested","vaccinated","formatISO","max","parseIndiaDate","representation","primaryStatistic","MAP_STATISTICS","includes","noDistrictData","UNKNOWN_DISTRICT_KEY","PRIMARY_STATISTICS","every","statistic","getStatistic","statisticConfig","STATISTIC_CONFIGS","noRegionHighlightedDistrictData","hasPrimary","STATE_NAMES","name","content","className","style","position","dates","forceRender","total","vaccinated1","fallback","minHeight","ref","classnames","expanded","gridTemplateRows","sort","a","b","districtNameA","districtNameB","districtA","districtB","handleSort","slice","undefined","delta","formatNumber","onClick","height","flexBasis","memo"],"mappings":"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","file":"static/js/36.cec2a17d.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nconst OPTIONS = {\r\n  root: null,\r\n  rootMargin: '0px 0px 0px 0px',\r\n  threshold: 0,\r\n};\r\n\r\nconst useIsVisible = (elementRef) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (elementRef.current) {\r\n      const observer = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            setIsVisible(true);\r\n            observer.unobserve(elementRef.current);\r\n          }\r\n        });\r\n      }, OPTIONS);\r\n      observer.observe(elementRef.current);\r\n    }\r\n  }, [elementRef]);\r\n\r\n  return isVisible;\r\n};\r\n\r\nexport default useIsVisible;\r\n","import {\r\n  DATA_API_ROOT,\r\n  MAP_STATISTICS,\r\n  PRIMARY_STATISTICS,\r\n  STATE_NAMES,\r\n  STATISTIC_CONFIGS,\r\n  UNKNOWN_DISTRICT_KEY,\r\n} from '../constants';\r\nimport useIsVisible from '../hooks/useIsVisible';\r\nimport {\r\n  fetcher,\r\n  formatNumber,\r\n  getStatistic,\r\n  parseIndiaDate,\r\n  retry,\r\n} from '../utils/commonFunctions';\r\n\r\nimport {SmileyIcon} from '@primer/octicons-react';\r\nimport classnames from 'classnames';\r\nimport {formatISO, max} from 'date-fns';\r\nimport {\r\n  memo,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  lazy,\r\n  Suspense,\r\n  useRef,\r\n} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useSessionStorage} from 'react-use';\r\nimport useSWR from 'swr';\r\n\r\nconst DeltaBarGraph = lazy(() => retry(() => import('./DeltaBarGraph')));\r\nconst Footer = lazy(() => retry(() => import('./Footer')));\r\nconst Level = lazy(() => retry(() => import('./Level')));\r\nconst VaccinationHeader = lazy(() =>\r\n  retry(() => import('./VaccinationHeader'))\r\n);\r\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\r\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\r\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\r\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\r\nconst StateMeta = lazy(() => retry(() => import('./StateMeta')));\r\nconst TimeseriesExplorer = lazy(() =>\r\n  retry(() => import('./TimeseriesExplorer'))\r\n);\r\n\r\nfunction State() {\r\n  const {t} = useTranslation();\r\n\r\n  const stateCode = useParams().stateCode.toUpperCase();\r\n\r\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\r\n    'mapStatistic',\r\n    'active'\r\n  );\r\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState({\r\n    stateCode: stateCode,\r\n    districtName: null,\r\n  });\r\n  const [delta7Mode, setDelta7Mode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (regionHighlighted.stateCode !== stateCode) {\r\n      setRegionHighlighted({\r\n        stateCode: stateCode,\r\n        districtName: null,\r\n      });\r\n      setShowAllDistricts(false);\r\n    }\r\n  }, [regionHighlighted.stateCode, stateCode]);\r\n\r\n  const {data: timeseries, error: timeseriesResponseError} = useSWR(\r\n    `${DATA_API_ROOT}/timeseries-${stateCode}.min.json`,\r\n    fetcher,\r\n    {\r\n      revalidateOnMount: true,\r\n      refreshInterval: 100000,\r\n    }\r\n  );\r\n\r\n  const {data} = useSWR(`${DATA_API_ROOT}/data.min.json`, fetcher, {\r\n    revalidateOnMount: true,\r\n    refreshInterval: 100000,\r\n  });\r\n\r\n  const stateData = data?.[stateCode];\r\n\r\n  const toggleShowAllDistricts = () => {\r\n    setShowAllDistricts(!showAllDistricts);\r\n  };\r\n\r\n  const handleSort = (districtNameA, districtNameB) => {\r\n    const districtA = stateData.districts[districtNameA];\r\n    const districtB = stateData.districts[districtNameB];\r\n    return (\r\n      getStatistic(districtB, 'total', mapStatistic) -\r\n      getStatistic(districtA, 'total', mapStatistic)\r\n    );\r\n  };\r\n\r\n  const gridRowCount = useMemo(() => {\r\n    if (!stateData) return;\r\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\r\n    const districtCount = stateData?.districts\r\n      ? Object.keys(stateData.districts).filter(\r\n          (districtName) => districtName !== 'Unknown'\r\n        ).length\r\n      : 0;\r\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\r\n    return gridRowCount;\r\n  }, [stateData]);\r\n\r\n  const stateMetaElement = useRef();\r\n  const isStateMetaVisible = useIsVisible(stateMetaElement);\r\n\r\n  const trail = useMemo(() => {\r\n    const styles = [];\r\n\r\n    [0, 0, 0, 0].map((element, index) => {\r\n      styles.push({\r\n        animationDelay: `${index * 250}ms`,\r\n      });\r\n      return null;\r\n    });\r\n    return styles;\r\n  }, []);\r\n\r\n  const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\r\n\r\n  const lastDataDate = useMemo(() => {\r\n    const updatedDates = [\r\n      stateData?.meta?.date,\r\n      stateData?.meta?.tested?.date,\r\n      stateData?.meta?.vaccinated?.date,\r\n    ].filter((date) => date);\r\n    return updatedDates.length > 0\r\n      ? formatISO(max(updatedDates.map((date) => parseIndiaDate(date))), {\r\n          representation: 'date',\r\n        })\r\n      : null;\r\n  }, [stateData]);\r\n\r\n  const primaryStatistic = MAP_STATISTICS.includes(mapStatistic)\r\n    ? mapStatistic\r\n    : 'confirmed';\r\n\r\n  const noDistrictData = useMemo(() => {\r\n    // Heuristic: All cases are in Unknown\r\n    return !!(\r\n      stateData?.districts &&\r\n      stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\r\n      PRIMARY_STATISTICS.every(\r\n        (statistic) =>\r\n          getStatistic(stateData, 'total', statistic) ===\r\n          getStatistic(\r\n            stateData.districts[UNKNOWN_DISTRICT_KEY],\r\n            'total',\r\n            statistic\r\n          )\r\n      )\r\n    );\r\n  }, [stateData]);\r\n\r\n  const statisticConfig = STATISTIC_CONFIGS[primaryStatistic];\r\n\r\n  const noRegionHighlightedDistrictData =\r\n    regionHighlighted?.districtName &&\r\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\r\n    noDistrictData;\r\n\r\n  const districts = Object.keys(\r\n    ((!noDistrictData || !statisticConfig.hasPrimary) &&\r\n      stateData?.districts) ||\r\n      {}\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>\r\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - incovid19.org\r\n        </title>\r\n        <meta\r\n          name=\"title\"\r\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\r\n        />\r\n      </Helmet>\r\n\r\n      <div className=\"State\">\r\n        <div className=\"state-left\">\r\n          <StateHeader data={stateData} stateCode={stateCode} />\r\n\r\n          <div style={{position: 'relative'}}>\r\n            <MapSwitcher {...{mapStatistic, setMapStatistic}} />\r\n            <Level data={stateData} />\r\n            <Minigraphs\r\n              timeseries={timeseries?.[stateCode]?.dates}\r\n              {...{stateCode}}\r\n              forceRender={!!timeseriesResponseError}\r\n            />\r\n          </div>\r\n\r\n          {stateData?.total?.vaccinated1 && (\r\n            <VaccinationHeader data={stateData} />\r\n          )}\r\n\r\n          {data && (\r\n            <Suspense fallback={<div style={{minHeight: '50rem'}} />}>\r\n              <MapExplorer\r\n                {...{\r\n                  stateCode,\r\n                  data,\r\n                  regionHighlighted,\r\n                  setRegionHighlighted,\r\n                  mapStatistic,\r\n                  setMapStatistic,\r\n                  lastDataDate,\r\n                  delta7Mode,\r\n                  setDelta7Mode,\r\n                  noRegionHighlightedDistrictData,\r\n                  noDistrictData,\r\n                }}\r\n              ></MapExplorer>\r\n            </Suspense>\r\n          )}\r\n\r\n          <span ref={stateMetaElement} />\r\n\r\n          {isStateMetaVisible && data && (\r\n            <Suspense fallback={<div />}>\r\n              <StateMeta\r\n                {...{\r\n                  stateCode,\r\n                  data,\r\n                }}\r\n                timeseries={timeseries?.[stateCode]?.dates}\r\n              />\r\n            </Suspense>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"state-right\">\r\n          <>\r\n            <div className=\"district-bar\">\r\n              <div\r\n                className={classnames('district-bar-top', {\r\n                  expanded: showAllDistricts,\r\n                })}\r\n              >\r\n                <div className=\"district-bar-left\">\r\n                  <h2\r\n                    className={classnames(primaryStatistic, 'fadeInUp')}\r\n                    style={trail[0]}\r\n                  >\r\n                    {t('Top districts')}\r\n                  </h2>\r\n                  <div\r\n                    className={`districts fadeInUp ${\r\n                      showAllDistricts ? 'is-grid' : ''\r\n                    }`}\r\n                    style={\r\n                      showAllDistricts\r\n                        ? {\r\n                            gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\r\n                            ...trail[1],\r\n                          }\r\n                        : trail[1]\r\n                    }\r\n                  >\r\n                    {districts\r\n                      .filter((districtName) => districtName !== 'Unknown')\r\n                      .sort((a, b) => handleSort(a, b))\r\n                      .slice(0, showAllDistricts ? undefined : 5)\r\n                      .map((districtName) => {\r\n                        const total = getStatistic(\r\n                          stateData.districts[districtName],\r\n                          'total',\r\n                          primaryStatistic\r\n                        );\r\n                        const delta = getStatistic(\r\n                          stateData.districts[districtName],\r\n                          'delta',\r\n                          primaryStatistic\r\n                        );\r\n                        return (\r\n                          <div key={districtName} className=\"district\">\r\n                            <h2>{formatNumber(total)}</h2>\r\n                            <h5>{t(districtName)}</h5>\r\n                            {primaryStatistic !== 'active' && (\r\n                              <div className=\"delta\">\r\n                                <h6 className={primaryStatistic}>\r\n                                  {delta > 0\r\n                                    ? '\\u2191' + formatNumber(delta)\r\n                                    : ''}\r\n                                </h6>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\r\n                  {timeseries &&\r\n                    (primaryStatistic === 'confirmed' ||\r\n                      primaryStatistic === 'deceased') && (\r\n                      <div className=\"happy-sign\">\r\n                        {Object.keys(timeseries[stateCode]?.dates || {})\r\n                          .slice(-lookback)\r\n                          .every(\r\n                            (date) =>\r\n                              getStatistic(\r\n                                timeseries[stateCode].dates[date],\r\n                                'delta',\r\n                                primaryStatistic\r\n                              ) === 0\r\n                          ) && (\r\n                          <div\r\n                            className={`alert ${\r\n                              primaryStatistic === 'confirmed' ? 'is-green' : ''\r\n                            }`}\r\n                          >\r\n                            <SmileyIcon />\r\n                            <div className=\"alert-right\">\r\n                              No new {primaryStatistic} cases in the past five\r\n                              days\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  <DeltaBarGraph\r\n                    timeseries={timeseries?.[stateCode]?.dates}\r\n                    statistic={primaryStatistic}\r\n                    {...{stateCode, lookback}}\r\n                    forceRender={!!timeseriesResponseError}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"district-bar-bottom\">\r\n                {districts.length > 5 ? (\r\n                  <button\r\n                    className=\"button fadeInUp\"\r\n                    onClick={toggleShowAllDistricts}\r\n                    style={trail[3]}\r\n                  >\r\n                    <span>\r\n                      {t(showAllDistricts ? 'View less' : 'View all')}\r\n                    </span>\r\n                  </button>\r\n                ) : (\r\n                  <div style={{height: '3.75rem', flexBasis: '15%'}} />\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <Suspense fallback={<div />}>\r\n              <TimeseriesExplorer\r\n                {...{\r\n                  stateCode,\r\n                  timeseries,\r\n                  regionHighlighted,\r\n                  setRegionHighlighted,\r\n                  noRegionHighlightedDistrictData,\r\n                }}\r\n                forceRender={!!timeseriesResponseError}\r\n              />\r\n            </Suspense>\r\n          </>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(State);\r\n"],"sourceRoot":""}