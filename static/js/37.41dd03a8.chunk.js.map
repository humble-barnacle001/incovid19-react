{"version":3,"sources":["hooks/useIsVisible.js","components/State.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","DeltaBarGraph","lazy","retry","Footer","Level","VaccinationHeader","MapExplorer","MapSwitcher","Minigraphs","StateHeader","StateMeta","TimeseriesExplorer","State","t","useTranslation","stateCode","useParams","toUpperCase","useSessionStorage","mapStatistic","setMapStatistic","showAllDistricts","setShowAllDistricts","districtName","regionHighlighted","setRegionHighlighted","delta7Mode","setDelta7Mode","useSWR","DATA_API_ROOT","fetcher","revalidateOnMount","refreshInterval","timeseries","data","timeseriesResponseError","error","stateData","scatter","json","console","log","margin","currentdate","lastUpdated","separator","newDate","Date","month","toLocaleString","date","getDate","getCurrentDate","d3","selectAll","remove","select","append","attr","html","svg","width","strokeWidth","height","y","scale","linear","range","x","xAxis","axis","ticks","tickFormat","d","prefix","formatPrefix","symbol","orient","yAxis","tooltip","Error","domain","call","text","enter","Vaccine1","Vaccine2","color","i","Math","floor","random","getRandomColor","on","style","tipsize","parseInt","event","pageY","pageX","Name","count1","count2","districts","details","includes","obj","meta","population","total","vaccinated1","vaccinated2","STATE_NAMES","toFixed","push","Object","keys","district","vaccine1","vaccine2","gridRowCount","useMemo","gridColumnCount","window","innerWidth","districtCount","filter","length","ceil","stateMetaElement","useRef","isStateMetaVisible","trail","styles","map","element","index","animationDelay","lookback","lastDataDate","updatedDates","tested","vaccinated","formatISO","max","parseIndiaDate","representation","primaryStatistic","MAP_STATISTICS","noDistrictData","UNKNOWN_DISTRICT_KEY","PRIMARY_STATISTICS","every","statistic","getStatistic","statisticConfig","STATISTIC_CONFIGS","noRegionHighlightedDistrictData","hasPrimary","name","content","className","position","dates","forceRender","fallback","minHeight","ref","classnames","expanded","gridTemplateRows","sort","a","b","districtNameA","districtNameB","districtA","districtB","handleSort","slice","undefined","delta","formatNumber","onClick","flexBasis","id","lassName","memo"],"mappings":"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","file":"static/js/37.41dd03a8.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nconst OPTIONS = {\r\n  root: null,\r\n  rootMargin: '0px 0px 0px 0px',\r\n  threshold: 0,\r\n};\r\n\r\nconst useIsVisible = (elementRef) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (elementRef.current) {\r\n      const observer = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting) {\r\n            setIsVisible(true);\r\n            observer.unobserve(elementRef.current);\r\n          }\r\n        });\r\n      }, OPTIONS);\r\n      observer.observe(elementRef.current);\r\n    }\r\n  }, [elementRef]);\r\n\r\n  return isVisible;\r\n};\r\n\r\nexport default useIsVisible;\r\n","import {\r\n  DATA_API_ROOT,\r\n  MAP_STATISTICS,\r\n  PRIMARY_STATISTICS,\r\n  STATE_NAMES,\r\n  STATISTIC_CONFIGS,\r\n  UNKNOWN_DISTRICT_KEY,\r\n} from '../constants';\r\nimport useIsVisible from '../hooks/useIsVisible';\r\nimport {\r\n  fetcher,\r\n  formatNumber,\r\n  getStatistic,\r\n  parseIndiaDate,\r\n  retry,\r\n} from '../utils/commonFunctions';\r\n\r\nimport { SmileyIcon } from '@primer/octicons-react';\r\nimport classnames from 'classnames';\r\nimport { formatISO, max } from 'date-fns';\r\nimport {\r\n  memo,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  lazy,\r\n  Suspense,\r\n  useRef,\r\n} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSessionStorage } from 'react-use';\r\nimport useSWR from 'swr';\r\n\r\nconst DeltaBarGraph = lazy(() => retry(() => import('./DeltaBarGraph')));\r\nconst Footer = lazy(() => retry(() => import('./Footer')));\r\nconst Level = lazy(() => retry(() => import('./Level')));\r\nconst VaccinationHeader = lazy(() =>\r\n  retry(() => import('./VaccinationHeader'))\r\n);\r\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\r\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\r\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\r\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\r\nconst StateMeta = lazy(() => retry(() => import('./StateMeta')));\r\nconst TimeseriesExplorer = lazy(() =>\r\n  retry(() => import('./TimeseriesExplorer'))\r\n);\r\n\r\nfunction State() {\r\n  const { t } = useTranslation();\r\n\r\n  const stateCode = useParams().stateCode.toUpperCase();\r\n\r\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\r\n    'mapStatistic',\r\n    'active'\r\n  );\r\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState({\r\n    stateCode: stateCode,\r\n    districtName: null,\r\n  });\r\n  const [delta7Mode, setDelta7Mode] = useState(false);\r\n\r\n\r\n  const { data: timeseries, error: timeseriesResponseError } = useSWR(\r\n    `${DATA_API_ROOT}/timeseries-${stateCode}.min.json`,\r\n    fetcher,\r\n    {\r\n      revalidateOnMount: true,\r\n      refreshInterval: 100000,\r\n    }\r\n  );\r\n\r\n  const { data } = useSWR(`${DATA_API_ROOT}/data.min.json`, fetcher, {\r\n    revalidateOnMount: true,\r\n    refreshInterval: 100000,\r\n  });\r\n\r\n  const stateData = data?.[stateCode];\r\n\r\n  const scatter = (json) => {\r\n    console.log(json)\r\n    const margin = { top: 60, left: 35, bottom: 40, right: 50 }\r\n    const heightValue = 300;\r\n    const widthValue = 600;\r\n    const getCurrentDate = (lastUpdated, separator = ' ') => {\r\n      console.log('lastUpdate', lastUpdated)\r\n      const newDate = new Date(lastUpdated)\r\n\r\n      const month = newDate.toLocaleString('default', { month: 'long' });\r\n      const date = newDate.getDate();\r\n\r\n      return `${date < 10 ? `0${date}` : `${date}`}${separator}${month}`\r\n    }\r\n    console.log('json', json)\r\n    const currentdate = getCurrentDate(json[0]?.Date)\r\n    /* \r\n    * The next block of code selects the id scatterplot-stats on the web page \r\n    * and appends an svg object to it of the size \r\n    * that we have set up with our width, height and margin’s.\r\n    */\r\n    d3.selectAll(\"#scatterplot-stats\").selectAll(\"svg\").remove()\r\n    d3.selectAll(\"#scatterplot-stats\").selectAll(\"#date\").remove()\r\n    d3.select(\"#scatterplot-stats\").append(\"div\").attr(\"id\", \"date\").attr(\"class\", 'graphtext').html(`${currentdate}`)\r\n    let svg = d3.select(\"#scatterplot-stats\").append(\"svg\")\r\n      .attr(\"viewBox\", `0 0 ${widthValue} ${heightValue}`)\r\n\r\n\r\n    const strokeWidth = 1.5;\r\n\r\n    const width = widthValue - margin.left - margin.right - (strokeWidth * 2);\r\n    const height = heightValue - margin.top - margin.bottom;\r\n\r\n    const y = d3.scale.linear().range([height, 0]);\r\n    const x = d3.scale.linear().range([0, width]);\r\n\r\n\r\n    // let prefix = d3.formatPrefix(1.21e9);\r\n    const xAxis = d3.svg.axis().scale(x).ticks(6).tickFormat(function (d) {\r\n      const prefix = d3.formatPrefix(d);\r\n      return prefix.scale(d) + prefix.symbol;\r\n    }).orient(\"bottom\")\r\n\r\n    const yAxis = d3.svg.axis().scale(y).orient(\"right\").ticks(6).tickFormat(function (d) {\r\n      const prefix = d3.formatPrefix(d);\r\n      return prefix.scale(d) + prefix.symbol;\r\n    });\r\n\r\n\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", 0)\r\n      .attr(\"fill\", \"#E3E2F3\")\r\n      .attr(\"rx\", 4)\r\n      .attr(\"fill-opacity\", 1);\r\n    // It also adds a g element that provides a reference point for adding our axes.  \r\n    svg = svg.append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\r\n    const tooltip = d3.select(\"#scatterplot-stats\").append(\"div\")\r\n      .attr(\"class\", \"tooltip\");\r\n\r\n    // function getColor(arg) {\r\n    //   return getRandomColor()\r\n    // }\r\n\r\n    function getRandomColor() {\r\n      const letters = '0123456789ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n      return color;\r\n    }\r\n\r\n    /* \r\n    * this function is like mouse over. \r\n    * If we place the mouse over a circle the tooltip is going to show up.\r\n    */\r\n    function showToolTip(d, i) {\r\n      console.log('tooltip', d)\r\n      tooltip.style({\r\n        \"display\": \"block\",\r\n        \"height\": \"80px\",\r\n        \"width\": \"200px\",\r\n        \"padding\": \"5px\",\r\n        \"opacity\": 1,\r\n        \"background-color\": d.color\r\n      });\r\n\r\n      const tipsize = {\r\n        dx: parseInt(tooltip.style(\"width\")),\r\n        dy: parseInt(tooltip.style(\"height\"))\r\n      };\r\n\r\n      tooltip.style({\r\n        \"top\": (d3.event.pageY - tipsize.dy - 5) + \"px\",\r\n        \"left\": (d3.event.pageX - tipsize.dx + 100) + \"px\"\r\n      }).html(\"<span><b>\" + d.Name + \"<br/>\" +\r\n        \"Vaccine Dose 1: \" + d.Vaccine1 + \"% <br/>\" +\r\n        \"Vaccine Dose 2: \" + d.Vaccine2 + \"%<br/>\" +\r\n        \"Total Vaccinations: \" + (d.count1 + d.count2))\r\n    }\r\n\r\n    /* \r\n    * This function is like mouse out. \r\n    * If we mouse out then the tooltip is hidding\r\n    */\r\n    function hideToolTip(d, i) {\r\n      console.log('tooltip', d)\r\n      tooltip.style({\r\n        \"display\": \"none\"\r\n      });\r\n    }\r\n\r\n\r\n    /* \r\n    * d3.json takes the variable url and two more parameters\r\n    * if error, then throw it\r\n    * else map the time-date in the horizontal axis and the rank-position in the verticall axis\r\n    */\r\n    // d3.json(json, (error, data) => {\r\n    const data = json;\r\n    if (!data) {\r\n      throw new Error(\"d3.json error\");\r\n    }\r\n    else {\r\n\r\n      x.domain([0, 100]);\r\n      y.domain([0, 100]);\r\n\r\n      svg.append(\"g\")\r\n        .attr(\"class\", \"x axis\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(xAxis)\r\n        .append(\"text\")\r\n        .attr(\"fill\", \"red\")\r\n        .attr(\"transform\", \"translate(\" + width + \",-30)\")\r\n        .attr(\"dy\", \"4.5em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(\"Vaccine Dose 1 %\");\r\n\r\n      svg.append(\"g\")\r\n        .attr(\"class\", \"y axis\")\r\n        .attr(\"transform\", \"translate(\" + width + \", 0)\")\r\n        .call(yAxis)\r\n        .append(\"text\")\r\n        .attr(\"transform\", \"rotate(0)\")\r\n        .attr(\"dy\", \"-0.8em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(\"Vaccine Dose 2 %\");\r\n\r\n      const districts = svg.selectAll(\".cyclist\")\r\n        .data(data)\r\n        .enter().append(\"g\")\r\n        .attr(\"class\", \"cyclist\")\r\n        .attr(\"x\", (d) => { return x(d.Vaccine1); })\r\n        .attr(\"y\", (d) => { return y(d.Vaccine2); });\r\n\r\n      districts.append(\"circle\")\r\n        .attr(\"cx\", (d) => { return x(d.Vaccine1) })\r\n        .attr(\"cy\", (d) => { return y(d.Vaccine2); })\r\n        .attr(\"r\", 5)\r\n        .attr(\"fill\", (d) => {\r\n          const color = getRandomColor();\r\n          d.color = color;\r\n          return color\r\n        })\r\n        .on(\"mouseover\", showToolTip)\r\n        .on(\"mouseout\", hideToolTip)\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (regionHighlighted.stateCode !== stateCode) {\r\n      setRegionHighlighted({\r\n        stateCode: stateCode,\r\n        districtName: null,\r\n      });\r\n      setShowAllDistricts(false);\r\n    }\r\n    console.log('json', data)\r\n    if (data?.[stateCode]) {\r\n      console.log('state', data[stateCode].districts)\r\n      const details = [];\r\n      const noPopulation = ['DL', 'LA']\r\n      if (noPopulation.includes(stateCode)) {\r\n        const obj = {};\r\n        if (data[stateCode]?.meta?.population && data[stateCode]?.total?.vaccinated1 && data[stateCode]?.total?.vaccinated2) {\r\n          obj.Name = STATE_NAMES[stateCode];\r\n          obj.Vaccine1 = ((data[stateCode]?.total?.vaccinated1 / data[stateCode]?.meta.population) * 100).toFixed(2)\r\n          obj.Vaccine2 = ((data[stateCode]?.total?.vaccinated2 / data[stateCode]?.meta.population) * 100).toFixed(2)\r\n          obj.count1 = data[stateCode]?.total?.vaccinated1;\r\n          obj.count2 = data[stateCode]?.total?.vaccinated2;\r\n          obj.Date = data[stateCode]?.meta?.date ?? ''\r\n          if (obj.Vaccine1 > 100) {\r\n            obj.Vaccine1 = 100\r\n            console.log('greater', obj)\r\n          }\r\n          if (obj.Vaccine2 > 100) {\r\n            obj.Vaccine2 = 100\r\n          }\r\n          if (obj.Vaccine1 && obj.Vaccine2 && obj.Vaccine1 <= 100 && obj.Vaccine2 <= 100) {\r\n            details.push(obj)\r\n          }\r\n        }\r\n      } else {\r\n        Object.keys(data[stateCode].districts).forEach((district) => {\r\n          if (data[stateCode].districts?.[district]?.total?.vaccinated1 && data[stateCode].districts?.[district]?.total?.vaccinated2 && data[stateCode].districts?.[district]?.meta?.population) {\r\n            let vaccine1 = ((data[stateCode].districts?.[district]?.total?.vaccinated1 / data[stateCode].districts?.[district]?.meta?.population) * 100).toFixed(2);\r\n            let vaccine2 = ((data[stateCode].districts?.[district]?.total?.vaccinated2 / data[stateCode].districts?.[district]?.meta?.population) * 100).toFixed(2);\r\n            if (vaccine1 > 100) {\r\n              vaccine1 = 100\r\n            }\r\n            if (vaccine2 > 100) {\r\n              vaccine2 = 100\r\n            }\r\n            if (vaccine1 && vaccine2 && vaccine1 <= 100 && vaccine2 <= 100) {\r\n              details.push({\r\n                \"Vaccine1\": vaccine1 ?? 0,\r\n                \"Vaccine2\": vaccine2 ?? 0,\r\n                \"count1\": data[stateCode].districts?.[district]?.total?.vaccinated1,\r\n                \"count2\": data[stateCode].districts?.[district]?.total?.vaccinated2,\r\n                \"Name\": district,\r\n                \"Date\": data[stateCode]?.meta?.date ?? ''\r\n              })\r\n            }\r\n          }\r\n        })\r\n      }\r\n      scatter(details)\r\n    }\r\n\r\n    // scatter([\r\n    //     {\r\n    // \"Time\": 300000,\r\n    // \"Place\": 10000,\r\n    // \"Seconds\": 2210,\r\n    // \"Name\": \"Marco Pantani\",\r\n    // \"Year\": 1995,\r\n    // \"Nationality\": \"ITA\",\r\n    // \"Doping\": \"Alleged drug use during 1995 due to high hematocrit levels\",\r\n    // \"URL\": \"https://en.wikipedia.org/wiki/Marco_Pantani#Alleged_drug_use\"\r\n    //   },\r\n    //           {\r\n    // \"Time\": 3504,\r\n    // \"Place\": 3300,\r\n    // \"Seconds\": 2210,\r\n    // \"Name\": \"Marco Pantani\",\r\n    // \"Year\": 1995,\r\n    // \"Nationality\": \"ITA\",\r\n    // \"Doping\": \"Alleged drug use during 1995 due to high hematocrit levels\",\r\n    // \"URL\": \"https://en.wikipedia.org/wiki/Marco_Pantani#Alleged_drug_use\"\r\n    //   },\r\n    // {\r\n    // \"Time\": 55,\r\n    // \"Place\": 100,\r\n    // \"Seconds\": 2210,\r\n    // \"Name\": \"Marco Pantani\",\r\n    // \"Year\": 1995,\r\n    // \"Nationality\": \"ITA\",\r\n    // \"Doping\": \"Alleged drug use during 1995 due to high hematocrit levels\",\r\n    // \"URL\": \"https://en.wikipedia.org/wiki/Marco_Pantani#Alleged_drug_use\"\r\n    // },\r\n    //   ]);\r\n\r\n  }, [regionHighlighted.stateCode, stateCode, stateData, data]);\r\n\r\n\r\n  const toggleShowAllDistricts = () => {\r\n    setShowAllDistricts(!showAllDistricts);\r\n  };\r\n\r\n  const handleSort = (districtNameA, districtNameB) => {\r\n    const districtA = stateData.districts[districtNameA];\r\n    const districtB = stateData.districts[districtNameB];\r\n    return (\r\n      getStatistic(districtB, 'total', mapStatistic) -\r\n      getStatistic(districtA, 'total', mapStatistic)\r\n    );\r\n  };\r\n\r\n  const gridRowCount = useMemo(() => {\r\n    if (!stateData) return;\r\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\r\n    const districtCount = stateData?.districts\r\n      ? Object.keys(stateData.districts).filter(\r\n        (districtName) => districtName !== 'Unknown'\r\n      ).length\r\n      : 0;\r\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\r\n    return gridRowCount;\r\n  }, [stateData]);\r\n\r\n  const stateMetaElement = useRef();\r\n  const isStateMetaVisible = useIsVisible(stateMetaElement);\r\n\r\n  const trail = useMemo(() => {\r\n    const styles = [];\r\n\r\n    [0, 0, 0, 0].map((element, index) => {\r\n      styles.push({\r\n        animationDelay: `${index * 250}ms`,\r\n      });\r\n      return null;\r\n    });\r\n    return styles;\r\n  }, []);\r\n\r\n  const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\r\n\r\n  const lastDataDate = useMemo(() => {\r\n    const updatedDates = [\r\n      stateData?.meta?.date,\r\n      stateData?.meta?.tested?.date,\r\n      stateData?.meta?.vaccinated?.date,\r\n    ].filter((date) => date);\r\n    return updatedDates.length > 0\r\n      ? formatISO(max(updatedDates.map((date) => parseIndiaDate(date))), {\r\n        representation: 'date',\r\n      })\r\n      : null;\r\n  }, [stateData]);\r\n\r\n  const primaryStatistic = MAP_STATISTICS.includes(mapStatistic)\r\n    ? mapStatistic\r\n    : 'confirmed';\r\n\r\n  const noDistrictData = useMemo(() => {\r\n    // Heuristic: All cases are in Unknown\r\n    return !!(\r\n      stateData?.districts &&\r\n      stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\r\n      PRIMARY_STATISTICS.every(\r\n        (statistic) =>\r\n          getStatistic(stateData, 'total', statistic) ===\r\n          getStatistic(\r\n            stateData.districts[UNKNOWN_DISTRICT_KEY],\r\n            'total',\r\n            statistic\r\n          )\r\n      )\r\n    );\r\n  }, [stateData]);\r\n\r\n  const statisticConfig = STATISTIC_CONFIGS[primaryStatistic];\r\n\r\n  const noRegionHighlightedDistrictData =\r\n    regionHighlighted?.districtName &&\r\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\r\n    noDistrictData;\r\n\r\n  const districts = Object.keys(\r\n    ((!noDistrictData || !statisticConfig.hasPrimary) &&\r\n      stateData?.districts) ||\r\n    {}\r\n  );\r\n\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>\r\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - incovid19.org\r\n        </title>\r\n        <meta\r\n          name=\"title\"\r\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\r\n        />\r\n      </Helmet>\r\n\r\n      <div className=\"State\">\r\n        <div className=\"state-left\">\r\n          <StateHeader data={stateData} stateCode={stateCode} />\r\n\r\n          <div style={{ position: 'relative' }}>\r\n            <MapSwitcher {...{ mapStatistic, setMapStatistic }} />\r\n            <Level data={stateData} />\r\n            <Minigraphs\r\n              timeseries={timeseries?.[stateCode]?.dates}\r\n              {...{ stateCode }}\r\n              forceRender={!!timeseriesResponseError}\r\n            />\r\n          </div>\r\n\r\n          {stateData?.total?.vaccinated1 && (\r\n            <VaccinationHeader data={stateData} />\r\n          )}\r\n\r\n          {data && (\r\n            <Suspense fallback={<div style={{ minHeight: '50rem' }} />}>\r\n              <MapExplorer\r\n                {...{\r\n                  stateCode,\r\n                  data,\r\n                  regionHighlighted,\r\n                  setRegionHighlighted,\r\n                  mapStatistic,\r\n                  setMapStatistic,\r\n                  lastDataDate,\r\n                  delta7Mode,\r\n                  setDelta7Mode,\r\n                  noRegionHighlightedDistrictData,\r\n                  noDistrictData,\r\n                }}\r\n              ></MapExplorer>\r\n            </Suspense>\r\n          )}\r\n\r\n          <span ref={stateMetaElement} />\r\n\r\n          {isStateMetaVisible && data && (\r\n            <Suspense fallback={<div />}>\r\n              <StateMeta\r\n                {...{\r\n                  stateCode,\r\n                  data,\r\n                }}\r\n                timeseries={timeseries?.[stateCode]?.dates}\r\n              />\r\n            </Suspense>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"state-right\">\r\n          <>\r\n            <div className=\"district-bar\">\r\n              <div\r\n                className={classnames('district-bar-top', {\r\n                  expanded: showAllDistricts,\r\n                })}\r\n              >\r\n                <div className=\"district-bar-left\">\r\n                  <h2\r\n                    className={classnames(primaryStatistic, 'fadeInUp')}\r\n                    style={trail[0]}\r\n                  >\r\n                    {t('Top districts')}\r\n                  </h2>\r\n                  <div\r\n                    className={`districts fadeInUp ${showAllDistricts ? 'is-grid' : ''\r\n                      }`}\r\n                    style={\r\n                      showAllDistricts\r\n                        ? {\r\n                          gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\r\n                          ...trail[1],\r\n                        }\r\n                        : trail[1]\r\n                    }\r\n                  >\r\n                    {districts\r\n                      .filter((districtName) => districtName !== 'Unknown')\r\n                      .sort((a, b) => handleSort(a, b))\r\n                      .slice(0, showAllDistricts ? undefined : 5)\r\n                      .map((districtName) => {\r\n                        const total = getStatistic(\r\n                          stateData.districts[districtName],\r\n                          'total',\r\n                          primaryStatistic\r\n                        );\r\n                        const delta = getStatistic(\r\n                          stateData.districts[districtName],\r\n                          'delta',\r\n                          primaryStatistic\r\n                        );\r\n                        return (\r\n                          <div key={districtName} className=\"district\">\r\n                            <h2>{formatNumber(total)}</h2>\r\n                            <h5>{t(districtName)}</h5>\r\n                            {primaryStatistic !== 'active' && (\r\n                              <div className=\"delta\">\r\n                                <h6 className={primaryStatistic}>\r\n                                  {delta > 0\r\n                                    ? '\\u2191' + formatNumber(delta)\r\n                                    : ''}\r\n                                </h6>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\r\n                  {timeseries &&\r\n                    (primaryStatistic === 'confirmed' ||\r\n                      primaryStatistic === 'deceased') && (\r\n                      <div className=\"happy-sign\">\r\n                        {Object.keys(timeseries[stateCode]?.dates || {})\r\n                          .slice(-lookback)\r\n                          .every(\r\n                            (date) =>\r\n                              getStatistic(\r\n                                timeseries[stateCode].dates[date],\r\n                                'delta',\r\n                                primaryStatistic\r\n                              ) === 0\r\n                          ) && (\r\n                            <div\r\n                              className={`alert ${primaryStatistic === 'confirmed' ? 'is-green' : ''\r\n                                }`}\r\n                            >\r\n                              <SmileyIcon />\r\n                              <div className=\"alert-right\">\r\n                                No new {primaryStatistic} cases in the past five\r\n                                days\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    )}\r\n                  <DeltaBarGraph\r\n                    timeseries={timeseries?.[stateCode]?.dates}\r\n                    statistic={primaryStatistic}\r\n                    {...{ stateCode, lookback }}\r\n                    forceRender={!!timeseriesResponseError}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"district-bar-bottom\">\r\n                {districts.length > 5 ? (\r\n                  <button\r\n                    className=\"button fadeInUp\"\r\n                    onClick={toggleShowAllDistricts}\r\n                    style={trail[3]}\r\n                  >\r\n                    <span>\r\n                      {t(showAllDistricts ? 'View less' : 'View all')}\r\n                    </span>\r\n                  </button>\r\n                ) : (\r\n                  <div style={{ height: '3.75rem', flexBasis: '15%' }} />\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <Suspense fallback={<div />}>\r\n              <TimeseriesExplorer\r\n                {...{\r\n                  stateCode,\r\n                  timeseries,\r\n                  regionHighlighted,\r\n                  setRegionHighlighted,\r\n                  noRegionHighlightedDistrictData,\r\n                }}\r\n                forceRender={!!timeseriesResponseError}\r\n              />\r\n              <div id=\"scatterplot-stats\">\r\n                <h1 lassName=\"text-center \">{t('Vaccination Coverage')}</h1>\r\n              </div>\r\n            </Suspense>\r\n          </>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"chartflex\">\r\n        <div className=\"flex1\">&nbsp;</div> */}\r\n      <div >\r\n\r\n      </div>\r\n      {/* </div> */}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(State);\r\n"],"sourceRoot":""}